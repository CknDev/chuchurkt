// Generated by LispyScript v1.0.0
var display = function(value) {
    return console.log(value);
};
var warn = function(value) {
    return console.warn(value);
};
var newline = function() {
    return console.log("");
};
var round = function(value) {
    return parseInt(value,10);
};
var flip = function(fn) {
    return function(a,b) {
        return fn(b,a);
    };
};
var f = function() {
    return false;
};
var t = function() {
    return true;
};
var list = function(...args) {
    return [
        ...args
    ];
};
var cons = function(element,l) {
    l.push(element);
    return l;
};
var concat = function(a,b,acc) {
    (a).forEach(function(element) {
        return acc.push(element);
    });
    (b).forEach(function(element) {
        return acc.push(element);
    });
    return acc;
};
var reverse = function(list) {
    return list.reverse();
};
var car = function(list) {
    return list[0];
};
var cdr = function(list) {
    return list.slice(1);
};
var listen = function(name,fn) {
    return document.addEventListener(name,function(e) {
        return fn(e);
    });
};
var $ = function(element) {
    return document.querySelector(element);
};
var ctx = function(canvas) {
    return canvas.getContext("2d");
};
var centerize = function(position,size) {
    var x = car(position);
    var y = car(cdr(position));
    var w = car(size);
    var h = car(cdr(size));
    return list(round((x + (w / 2))),round((y + (h / 2))));
};
var write = function(text,position,ctx) {
    ctx.font = "12px Verdana";
    var padd = (12 / 3);
    var x = (car(position) - padd);
    var y = (car(cdr(position)) + padd);
    return ctx.fillText(text,x,y);
};
var drawSprite = function(source,destination,image,ctx) {
    [sx, sy, sw, sh] = source;
    [dx, dy, dw, dh] = destination;
    return ctx.drawImage(image,sx,sy,sw,sh,dx,dy,dw,dh);
};
var rect = function(position,size,ctx) {
    ctx.beginPath();
    return ctx.rect(car(position),car(cdr(position)),car(size),car(cdr(size)));
};
var stroke = function(ctx) {
    return ctx.stroke();
};
var background = function(color,ctx) {
    ctx.fillStyle = color;
    return ctx.fill();
};
var clr = function(w,h,ctx) {
    return ctx.clearRect(0,0,w,h);
};
var tilify = function(x,y,xMax,yMax,xTile,yTile,ctx) {
    rect(list(x,y),list(xTile,yTile),ctx);
    stroke(ctx);
    return ((x === xMax) ?
        ((y === yMax) ?
            false :
            tilify(0,(y + yTile),xMax,yMax,xTile,yTile,ctx)) :
        tilify((x + xTile),y,xMax,yMax,xTile,yTile,ctx));
};
var select = function(position,size,ctx) {
    rect(position,size,ctx);
    return background("green",ctx);
};
var moveSelect = function(currentDirection,padd,selectionBlock) {
    var direction = {
        UP: "UP",
        RIGHT: "RIGHT",
        DOWN: "DOWN",
        LEFT: "LEFT"
    };
    var x = car(selectionBlock);
    var y = car(cdr(selectionBlock));
    var xPadd = car(padd);
    var yPadd = car(cdr(padd));
    return ((currentDirection === direction.UP) ?
        list(x,(y - yPadd)) :
        ((currentDirection === direction.RIGHT) ?
            list((x + xPadd),y) :
            ((currentDirection === direction.DOWN) ?
                list(x,(y + yPadd)) :
                ((currentDirection === direction.LEFT) ?
                    list((x - xPadd),y) :
                    undefined))));
};
var hasMaxArrow = function(arrows) {
    return ((arrows === MAX_ARROW) ?
        true :
        false);
};
var domArrowCounter = function(arrowCounter) {
    var el = $(".arrow-counter");
    el.innerHTML = arrowCounter;
};
var domArrowMax = function(max) {
    var el = $(".arrow-max");
    el.innerHTML = max;
};
var renderInventory = function(arrowList,image,ctx) {
    var arrowTileSet = {
        UP: list(0,0,50,50),
        RIGHT: list(50,0,50,50),
        DOWN: list(100,0,50,50),
        LEFT: list(150,0,50,50)
    };
    var slotsPosition = list(list(0,0,50,50),list(70,0,50,50),list(140,0,50,50),list(210,0,50,50));
    clearInventoryCanvas();
    return (arrowList).forEach(function(arrow,index) {
        return drawSprite(arrowTileSet[arrow],slotsPosition[index],image,ctx);
    });
};
var arrowSelect = function(currentDirection,image,sizeBlock,selectedBlock,inventory,board,inventoryCtx,ctx) {
    return ((false === hasArrow(currentDirection,inventory)) ?
        list(inventory,board) :
        (function() {
            var arrowTileSet = {
                UP: list(0,0,50,50),
                RIGHT: list(50,0,50,50),
                DOWN: list(100,0,50,50),
                LEFT: list(150,0,50,50)
            };
            var x = car(selectedBlock);
            var y = car(cdr(selectedBlock));
            [dw, dh] = sizeBlock;
            transfer = toBoardArrow(currentDirection,inventory,board);
            [inventory, board] = transfer;
            ctx.clearRect(x,y,dw,dh);
            boardArrowPosition = addArrowPosition(selectedBlock,boardArrowPosition,[]);
            padd = 5;
            center_size = list((car(block_size) - 5),(car(cdr(block_size)) - 5));
            drawSprite(arrowTileSet[currentDirection],list(x,y,dw,dh),image,ctx);
            (boardArrowPosition).forEach(function(position) {
                center = centerize(position,center_size);
                rect(center,list(5,5),ctx);
                return background("blue",ctx);
            });
            renderInventory(inventory,image,inventoryCtx);
            return list(inventory,board,countBoard(board,0));
        })());
};
var domSelectMode = function(currentMode) {
    var el = $(".select-mode");
    el.innerHTML = currentMode;
};
var toggleMode = function(currentMode) {
    var modes = list("navigation","arrow");
    ((currentMode === car(modes)) ?
        domSelectMode(car(cdr(modes))) :
        domSelectMode(car(modes)));
    return ((currentMode === car(modes)) ?
        car(cdr(modes)) :
        ((currentMode === car(cdr(modes))) ?
            car(modes) :
            undefined));
};
var hasArrow = function(currentArrow,arrowList) {
    return ((typeof(car(arrowList)) === "undefined") ?
        f() :
        ((currentArrow === car(arrowList)) ?
            t() :
            hasArrow(currentArrow,cdr(arrowList))));
};
var countBoard = function(arrowList,acc) {
    return ((typeof(car(arrowList)) === "undefined") ?
        acc :
        ((car(arrowList) !== "") ?
            countBoard(cdr(arrowList),(acc + 1)) :
            countBoard(cdr(arrowList),acc)));
};
var removeArrow = function(currentArrow,arrowList,acc,found) {
    return ((true === found) ?
        acc :
        ((car(arrowList) === currentArrow) ?
            removeArrow(currentArrow,arrowList,concat(acc,cdr(arrowList),[]),true) :
            ((typeof(car(arrowList)) === "undefined") ?
                removeArrow(currentArrow,arrowList,acc,true) :
                removeArrow(currentArrow,cdr(arrowList),cons(car(arrowList),acc),false))));
};
var removeArrowPosition = function(currentPosition,arrowList,acc,found) {
    [x, y] = car(arrowList);
    return ((true === found) ?
        acc :
        (((x === car(currentPosition)) && (y === car(cdr(currentPosition)))) ?
            removeArrowPosition(currentPosition,arrowList,concat(acc,cdr(arrowList),[]),true) :
            ((typeof(car(arrowList)) === "undefined") ?
                removeArrowPosition(currentPosition,arrowList,acc,true) :
                removeArrowPosition(currentPosition,cdr(arrowList),cons(car(arrowList),acc),false))));
};
var addArrow = function(currentArrow,arrowList,acc) {
    ((typeof(acc) === "undefined") ?
        acc = [] :
        undefined);
    return ((car(arrowList) === "") ?
        concat(acc,concat(list(currentArrow),cdr(arrowList),[]),[]) :
        ((typeof(car(arrowList)) === "undefined") ?
            concat(list(currentArrow),cdr(reverse(acc)),[]) :
            addArrow(currentArrow,cdr(arrowList),concat(list(car(arrowList)),acc,[]))));
};
var addArrowPosition = function(currentPosition,arrowList,acc) {
    ((typeof(acc) === "undefined") ?
        acc = [] :
        undefined);
    var defaultPosition = list(-100,-100);
    [x, y] = car(arrowList);
    return (((x === car(defaultPosition)) && (y === car(cdr(defaultPosition)))) ?
        concat(acc,concat(list(currentPosition),cdr(arrowList),[]),[]) :
        ((typeof(car(arrowList)) === "undefined") ?
            concat(currentPosition,cdr(reverse(acc)),[]) :
            addArrowPosition(currentPosition,cdr(arrowList),concat(list(car(arrowList)),acc,[]))));
};
var transferArrow = function(arrow,origin,dest) {
    var from = removeArrow(arrow,origin,[],false);
    var to = addArrow(arrow,dest,[]);
    return list(from,to);
};
var isEmptyInventory = function(inventory) {
    var ln = inventory.length;
    var index = 0;
    (inventory).forEach(function(item) {
        return ((item === "") ?
            index = (index + 1) :
            undefined);
    });
    return ((index === ln) ?
        t() :
        f());
};
var isEmptyBoard = function(board) {
    return (board.length === 0);
};
var toBoardArrow = function(arrow,inventory,board) {
    return (((true === isEmptyInventory(inventory)) || (false === hasArrow(arrow,inventory))) ?
        board :
        transferArrow(arrow,inventory,board));
};
var toInventoryArrow = function(arrow,inventory,board) {
    return ((true === isEmptyInventory(inventory)) ?
        f() :
        transferArrow(arrow,board,inventory));
};
var fill = function(iteration,list) {
    return list.fill(iteration);
};
var length = function(list) {
    return list.length;
};
var keyboard = {
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    LEFT: 37,
    SPACE: 32
};
var arrowTileSet = list({
    UP: list(0,0,50,0)
},{
    RIGHT: list(50,0,50,0)
},{
    DOWN: list(100,0,50,0)
},{
    LEFT: list(150,0,50,0)
});
var selectMode = "navigation";
domSelectMode(selectMode);
var tileInit = function() {
    tileMap = new Image();
    tileMap.src = "./dist/assets/tileset.png";
    return tileMap;
};
var TILE_SIZE = list(25,15);
var WIN_WIDTH = 800;
var WIN_HEIGHT = 600;
var GAME_WIDTH = 270;
var GAME_HEIGHT = 130;
var GAME_BOX = list(GAME_WIDTH,GAME_HEIGHT);
var CANVAS_MAIN = $("canvas.main");
var CANVAS_GROUND = $("canvas.ground");
var CANVAS_SELECTION = $("canvas.selection");
var CANVAS_ARROW = $("canvas.arrow");
var CANVAS_INVENTORY = $("canvas.inventory");
var block_size = TILE_SIZE;
var main = ctx(CANVAS_MAIN);
var ground = ctx(CANVAS_GROUND);
var selection = ctx(CANVAS_SELECTION);
var arrow = ctx(CANVAS_ARROW);
var inventory = ctx(CANVAS_INVENTORY);
main.scale(1.0,1.0);
ground.scale(1.0,1.0);
selection.scale(1.0,1.0);
arrow.scale(1.0,1.0);
inventory.scale(1.0,1.0);
var spriteSheet = tileInit();
var clearMainCanvas = function() {
    return clr(CANVAS_MAIN.width,CANVAS_MAIN.height,main);
};
var clearSelectionCanvas = function() {
    return clr(CANVAS_SELECTION.width,CANVAS_SELECTION.height,selection);
};
var clearInventoryCanvas = function() {
    return clr(CANVAS_INVENTORY.width,CANVAS_INVENTORY.height,inventory);
};
tilify(0,0,WIN_WIDTH,WIN_HEIGHT,car(TILE_SIZE),car(cdr(TILE_SIZE)),ground);
var block_selected = list(0,0);
var listenTo = function(e) {
    e.preventDefault();
    domArrowCounter(arrowCounter);
    ((e.keyCode === keyboard.SPACE) ?
        selectMode = toggleMode(selectMode) :
        undefined);
    ((selectMode === "navigation") ?
        ((e.keyCode === keyboard.UP) ?
            clearSelectionCanvas(block_selected = moveSelect("UP",block_size,block_selected)) :
            undefined)(((e.keyCode === keyboard.RIGHT) ?
            clearSelectionCanvas(block_selected = moveSelect("RIGHT",block_size,block_selected)) :
            undefined),((e.keyCode === keyboard.DOWN) ?
            clearSelectionCanvas(block_selected = moveSelect("DOWN",block_size,block_selected)) :
            undefined),((e.keyCode === keyboard.LEFT) ?
            clearSelectionCanvas(block_selected = moveSelect("LEFT",block_size,block_selected)) :
            undefined)) :
        undefined);
    ((selectMode === "arrow") ?
        ((true === hasMaxArrow(arrowCounter)) ?
            f() :
            ((e.keyCode === keyboard.UP) ?
                [inventoryArrowList,
                                           boardArrowList,
                                           arrowCounter] = arrowSelect("UP",spriteSheet,block_size,block_selected,inventoryArrowList,boardArrowList,inventory,arrow) :
                ((e.keyCode === keyboard.RIGHT) ?
                    [inventoryArrowList,
                                           boardArrowList,
                                           arrowCounter] = arrowSelect("RIGHT",spriteSheet,block_size,block_selected,inventoryArrowList,boardArrowList,inventory,arrow) :
                    ((e.keyCode === keyboard.DOWN) ?
                        [inventoryArrowList,
                                           boardArrowList,
                                           arrowCounter] = arrowSelect("DOWN",spriteSheet,block_size,block_selected,inventoryArrowList,boardArrowList,inventory,arrow) :
                        ((e.keyCode === keyboard.LEFT) ?
                            [inventoryArrowList,
                                           boardArrowList,
                                           arrowCounter] = arrowSelect("LEFT",spriteSheet,block_size,block_selected,inventoryArrowList,boardArrowList,inventory,arrow) :
                            undefined))))()) :
        undefined);
    return false;
};
var arrowCounter = 0;
var levelArrowList = list("UP","DOWN","LEFT","LEFT");
var MAX_ARROW = levelArrowList.length;
var inventoryArrowList = levelArrowList;
var boardArrowList = list("","","","");
var boardArrowPosition = list(list(-100,-100),list(-100,-100),list(-100,-100),list(-100,-100));
domArrowCounter(arrowCounter);
domArrowMax(MAX_ARROW);
var mouse = list(0,120);
[x,y] = mouse;
var goUp = function(y,velocity) {
    return (y - velocity);
};
var goLeft = function(x,velocity) {
    return (x - velocity);
};
var goDown = function(y,velocity) {
    return (y + velocity);
};
var goRight = function(x,velocity) {
    return (x + velocity);
};
var isRightCorner = function(x) {
    return (x >= GAME_WIDTH);
};
var isBottomCorner = function(y) {
    return (y > GAME_HEIGHT);
};
var isTopCorner = function(y) {
    return (y <= 0);
};
var isLeftCorner = function(x) {
    return (x <= 0);
};
var checkCollideGame = function(position,gameBox) {
    [x, y] = position;
    [w, h] = gameBox;
    return (((x <= 0) || (y <= 0)) || ((x > w) || (y > h)));
};
var collideTopGame = function(position,gameBox) {
    [x, y] = position;
    [w, h] = gameBox;
    return (y <= 0);
};
var collideBottomGame = function(position,gameBox) {
    [x, y] = position;
    [w, h] = gameBox;
    return (y > h);
};
var collideRightGame = function(position,gameBox) {
    [x, y] = position;
    [w, h] = gameBox;
    return (x > w);
};
var collideLeftGame = function(position,gameBox) {
    [x, y] = position;
    [w, h] = gameBox;
    return (x <= 0);
};
var redirectTop = function(position) {
    [x, y] = position;
    return ((true === ((false === isRightCorner(x)) || (false === isLeftCorner(x)))) ?
        "LEFT" :
        ((true === isRightCorner(x)) ?
            "LEFT" :
            ((true === isLeftCorner(x)) ?
                "RIGHT" :
                undefined)));
};
var redirectBottom = function(position) {
    [x, y] = position;
    return ((true === ((false === isRightCorner(x)) || (false === isLeftCorner(x)))) ?
        "RIGHT" :
        ((true === isRightCorner(x)) ?
            "LEFT" :
            ((true === isLeftCorner(x)) ?
                "RIGHT" :
                undefined)));
};
var redirectRight = function(position) {
    [x, y] = position;
    return ((true === isBottomCorner(y)) ?
        "UP" :
        ((true === isTopCorner(y)) ?
            "DOWN" :
            ((true === ((false === isBottomCorner(y)) || (false === isTopcorner(y)))) ?
                "UP" :
                undefined)));
};
var redirectLeft = function(position) {
    [x, y] = position;
    return ((true === isBottomCorner(y)) ?
        "UP" :
        ((true === isTopCorner(y)) ?
            "DOWN" :
            ((true === ((false === isBottomCorner(y)) || (false === isTopcorner(y)))) ?
                "DOWN" :
                undefined)));
};
var resetSpeed = function() {
    return 0;
};
var normalSpeed = function() {
    return 5;
};
var lowSpeed = function() {
    return 1;
};
var highSpeed = function() {
    return 10;
};
var spawnEntity = function(spawnPosition,size,ctx) {
    var spawnEntity = spawnPosition;
    rect(spawnPosition,size,ctx);
    background("red",ctx);
    return spawnEntity;
};
var moveEntity = function(position,velocity,direction) {
    var entity = position;
    ((direction === "UP") ?
        entity = list(car(position),goUp(car(cdr(position)),car(cdr(velocity)))) :
        ((direction === "RIGHT") ?
            entity = list(goRight(car(position),car(velocity)),car(cdr(position))) :
            ((direction === "DOWN") ?
                entity = list(car(position),goDown(car(cdr(position)),car(cdr(velocity)))) :
                ((direction === "LEFT") ?
                    entity = list(goLeft(car(position),car(velocity)),car(cdr(position))) :
                    undefined))));
    return entity;
};
var ent = spawnEntity(mouse,block_size,main);
var init = true;
var update = function() {
    return setInterval(function() {
        clearMainCanvas();
        ((car(cdr(ent)) > GAME_HEIGHT) ?
            clearInterval(update) :
            ((true === init) ?
                ent = moveEntity(ent,list(normalSpeed(),normalSpeed()),"RIGHT") :
                undefined));
        ((true === checkCollideGame(ent,GAME_BOX)) ?
            (function() {
                init = false;
                ((true === collideBottomGame(ent,GAME_BOX)) ?
                    ent = moveEntity(ent,list(normalSpeed(),resetSpeed()),redirectBottom(ent)) :
                    undefined);
                ((true === collideLeftGame(ent,GAME_BOX)) ?
                    ent = moveEntity(ent,list(resetSpeed(),normalSpeed()),redirectLeft(ent)) :
                    undefined);
                ((true === collideTopGame(ent,GAME_BOX)) ?
                    ent = moveEntity(ent,list(normalSpeed(),resetSpeed()),redirectTop(ent)) :
                    undefined);
                return ((true === collideRightGame(ent,GAME_BOX)) ?
                    ent = moveEntity(ent,list(resetSpeed(),normalSpeed()),redirectRight(ent)) :
                    undefined);
            })() :
            undefined);
        select(block_selected,block_size,selection);
        rect(ent,block_size,main);
        return background("red",main);
    },100);
};
spriteSheet.onload = function() {
    renderInventory(inventoryArrowList,spriteSheet,inventory);
    listen("keyup",function(e) {
        return listenTo(e);
    });
    return update();
};
